// Initialize global app state
window.app = {
    dom: {},  // Contains all DOM element references
    conjugationFormsList: null,
    menuItems: null,
    selectedSection: 'verbs',
    welcomeScreen: null,
    mainApp: null,
    newProfileBtn: null,
    loadProfileBtn: null,
    profileForm: null,
    profileList: null,
    state: {
        learningQueue: [],
        currentCard: null,
        correctCount: 0,
        incorrectCount: 0,
        currentTopic: "masu",
        currentMode: "introduction",
        currentIntroSlideIndex: 0
    }
};

// Profile management functions
function createNewProfile(profileData) {
    try {
        if (!profileData || !profileData.username) {
            throw new Error('Invalid profile data');
        }

        const profile = {
            username: profileData.username,
            level: 1,
            totalExp: 0,
            joinDate: new Date().toISOString(),
            avatar: 'default',
            achievements: [],
            currentRank: 'Beginner',
            settings: {
                dailyGoal: parseInt(profileData.dailyGoal) || 20,
                studyLevel: profileData.level || 'beginner',
                reviewInterval: 3,
                studyReminders: false,
                notificationTime: '09:00'
            }
        };

        userProgress.updateProfile(profile);
        
        // Hide welcome screen and show main app
        if (window.app.welcomeScreen && window.app.mainApp) {
            window.app.welcomeScreen.classList.add('hidden');
            window.app.mainApp.classList.remove('hidden');
            
            // Start a new session and initialize the app
            userProgress.startSession();
            initializeApp();
            return true;
        } else {
            throw new Error('Welcome screen elements not found');
        }
    } catch (error) {
        console.error('Error creating profile:', error);
        return false;
    }
}

function loadExistingProfile() {
    const profile = userProgress.getProgress().profile;
    if (profile && profile.username) {
        window.app.welcomeScreen.classList.add('hidden');
        window.app.mainApp.classList.remove('hidden');
        setTimeout(initializeApp, 0);
    } else {
        showSection('profile-selection');
    }
}

function showSection(sectionId) {
    console.log('Showing section:', sectionId);
    document.querySelectorAll('.welcome-section').forEach(section => {
        section.classList.toggle('active', section.id === sectionId);
    });
}

// Core initialization function
function initializeApp() {
    console.log('Initializing app...');
    
    // Initialize main app elements
    window.app.menuItems = document.querySelectorAll('.menu-item');
    window.app.conjugationFormsList = document.querySelector('.conjugation-forms');
    
    // Initialize DOM elements
    Object.assign(window.app.dom, {
        kanaDisplay: document.getElementById('kana-display'),
        kanjiDisplay: document.getElementById('kanji-display'),
        formDisplay: document.getElementById('form-display'),
        verbTypeDisplay: document.getElementById('verb-type-display'),
        answerInput: document.getElementById('answer-input'),
        checkButton: document.getElementById('check-button'),
        nextButton: document.getElementById('next-button'),
        feedbackMessage: document.getElementById('feedback-message'),
        correctAnswerDisplay: document.getElementById('correct-answer-display'),
        correctCount: document.getElementById('correct-count'),
        incorrectCount: document.getElementById('incorrect-count'),
        resetButton: document.getElementById('reset-button'),
        topicSelect: document.getElementById('topic-select'),
        introPanel: document.getElementById('introduction-panel'),
        introTitle: document.getElementById('intro-title'),
        introSectionsContainer: document.getElementById('intro-sections-container'),
        startPracticeButton: document.getElementById('start-practice-button'),
        prevIntroSlideButton: document.getElementById('prev-intro-slide-button'),
        nextIntroSlideButton: document.getElementById('next-intro-slide-button'),
        cardPanel: document.querySelector('.card-panel'),
        feedbackArea: document.querySelector('.feedback-area'),
        progressArea: document.querySelector('.progress-area')
    });

    // Set up the welcome screen elements
    window.app.welcomeScreen = document.getElementById('welcome-screen');
    window.app.mainApp = document.getElementById('main-app');
    window.app.newProfileBtn = document.getElementById('new-profile-btn');
    window.app.loadProfileBtn = document.getElementById('load-profile-btn');
    window.app.profileForm = document.getElementById('profile-form');
    window.app.profileList = document.getElementById('profile-list');

    // Set up welcome screen event listeners
    if (window.app.newProfileBtn) {
        window.app.newProfileBtn.addEventListener('click', () => {
            showSection('create-profile');
        });
    }

    if (window.app.loadProfileBtn) {
        window.app.loadProfileBtn.addEventListener('click', () => {
            showSection('load-profile');
        });
    }

    // Handle level and goal button selections
    document.querySelectorAll('.level-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.level-btn').forEach(b => b.classList.remove('selected'));
            btn.classList.add('selected');
        });
    });

    document.querySelectorAll('.goal-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.goal-btn').forEach(b => b.classList.remove('selected'));
            btn.classList.add('selected');
        });
    });

    // Handle profile form submission
    if (window.app.profileForm) {
        window.app.profileForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const username = document.getElementById('username')?.value?.trim();
            const selectedLevelBtn = document.querySelector('.level-btn.selected');
            const selectedGoalBtn = document.querySelector('.goal-btn.selected');
            const level = selectedLevelBtn?.dataset.level || 'beginner';
            const dailyGoal = selectedGoalBtn?.dataset.goal || '20';
            
            if (!username || !selectedLevelBtn || !selectedGoalBtn) {
                alert('Please fill in all required profile information');
                return;
            }

            const success = createNewProfile({ username, level, dailyGoal });
            if (!success) {
                alert('There was an error creating your profile. Please try again.');
            }
        });
    }

    // Set up app functionality
    setupSidebar();
    loadState();
    populateTopicSelect();
    updateConjugationForms(window.app.selectedSection);

    // Set up practice UI event listeners
    const dom = window.app.dom;
    dom.answerInput.addEventListener('input', handleAnswerInput);
    dom.answerInput.addEventListener('keydown', handleAnswerKeyDown);
    dom.checkButton.addEventListener('click', checkAnswer);
    dom.nextButton.addEventListener('click', displayNextCard);
    dom.startPracticeButton.addEventListener('click', startPractice);
    dom.topicSelect.addEventListener('change', handleTopicChange);
    dom.prevIntroSlideButton.addEventListener('click', handlePrevSlide);
    dom.nextIntroSlideButton.addEventListener('click', handleNextSlide);
    dom.resetButton.addEventListener('click', handleReset);

    // Initialize UI state
    if (window.app.state.currentMode === 'practice' && window.app.state.learningQueue.length > 0) {
        displayNextCard();
    } else {
        window.app.state.currentMode = 'introduction';
        displayIntroductionUI();
    }
}

// Event handler functions
function handleAnswerInput(e) {
    const romaji = e.target.value;
    const hiragana = toHiragana(romaji);
    const dom = window.app.dom;
    if (window.app.state.currentCard) {
        dom.kanaDisplay.textContent = hiragana || window.app.state.currentCard.item.kana;
    }
}

function handleAnswerKeyDown(e) {
    const dom = window.app.dom;
    if (e.key === 'Enter') {
        if (!dom.checkButton.classList.contains('hidden')) {
            checkAnswer();
        } else if (!dom.nextButton.classList.contains('hidden')) {
            displayNextCard();
        }
    }
}

function handleTopicChange(e) {
    window.app.state.currentTopic = e.target.value;
    window.app.state.currentMode = 'introduction';
    window.app.state.currentIntroSlideIndex = 0;
    displayIntroductionUI();
    saveState();
}

function handlePrevSlide() {
    if (window.app.state.currentIntroSlideIndex > 0) {
        window.app.state.currentIntroSlideIndex--;
        displayIntroductionUI();
    }
}

function handleNextSlide() {
    const introContent = formIntroContent[window.app.state.currentTopic];
    if (introContent && window.app.state.currentIntroSlideIndex < introContent.sections.length - 1) {
        window.app.state.currentIntroSlideIndex++;
        displayIntroductionUI();
    }
}

function handleReset() {
    if (confirm('Are you sure you want to reset your session scores?')) {
        window.app.state.correctCount = 0;
        window.app.state.incorrectCount = 0;
        updateCounts();
        saveState();
    }
}

// App functionality
function saveState() {
    const stateToSave = { ...window.app.state };
    if (window.app.state.currentMode !== 'practice') {
        stateToSave.learningQueue = [];
    }
    localStorage.setItem('conjugationPracticeState', JSON.stringify(stateToSave));
}

function updateCounts() {
    const dom = window.app.dom;
    dom.correctCount.textContent = window.app.state.correctCount;
    dom.incorrectCount.textContent = window.app.state.incorrectCount;
}

function loadState() {
    const savedState = localStorage.getItem('conjugationPracticeState');
    if (savedState) {
        const loaded = JSON.parse(savedState);
        Object.assign(window.app.state, {
            currentTopic: loaded.currentTopic || "masu",
            correctCount: loaded.correctCount || 0,
            incorrectCount: loaded.incorrectCount || 0,
            learningQueue: loaded.learningQueue || [],
            currentMode: loaded.currentMode || "introduction",
            currentIntroSlideIndex: loaded.currentIntroSlideIndex || 0
        });
    }
    window.app.dom.topicSelect.value = window.app.state.currentTopic;
    updateCounts();
}

function setupSidebar() {
    const menuItems = document.querySelectorAll('.menu-item');
    menuItems.forEach(item => {
        item.addEventListener('click', (e) => {
            menuItems.forEach(mi => mi.classList.remove('active'));
            e.currentTarget.classList.add('active');
            
            window.app.selectedSection = e.currentTarget.dataset.section;
            updateConjugationForms(window.app.selectedSection);
            updateTopicSelectForSection(window.app.selectedSection);
        });
    });
}

function updateConjugationForms(section) {
    const conjugationFormsList = window.app.conjugationFormsList;
    if (!conjugationFormsList) {
        console.error('Conjugation forms list element not found');
        return;
    }

    conjugationFormsList.innerHTML = '';
    const forms = getFormsForSection(section);
    
    forms.forEach(form => {
        const item = document.createElement('div');
        item.classList.add('menu-item');
        item.dataset.form = form.key;
        item.textContent = form.display;
        
        if (form.key === window.app.state.currentTopic) {
            item.classList.add('active');
        }

        item.addEventListener('click', () => {
            conjugationFormsList.querySelectorAll('.menu-item')
                .forEach(mi => mi.classList.remove('active'));
            item.classList.add('active');

            window.app.state.currentTopic = form.key;
            window.app.dom.topicSelect.value = form.key;
            generateNewPracticeSession();
        });

        conjugationFormsList.appendChild(item);
    });
}

function getFormsForSection(section) {
    switch(section) {
        case 'verbs':
            return conjugationForms.filter(form => 
                ['masu', 'masuNegative', 'te', 'ta', 'nai', 'potential', 'passive', 'causative'].includes(form.key)
            );
        case 'adjectives':
            return conjugationForms.filter(form => 
                ['iAdjectiveNegative', 'iAdjectivePast', 'iAdjectivePastNegative'].includes(form.key)
            );
        case 'particles':
            return conjugationForms.filter(form => form.key === 'meaning');
        default:
            return [];
    }
}

function updateTopicSelectForSection(section) {
    const dom = window.app.dom;
    dom.topicSelect.innerHTML = '';
    
    switch(section) {
        case 'verbs':
            populateTopicOptions(conjugationForms.filter(form => form.category === 'Verbs'));
            break;
        case 'adjectives':
            populateTopicOptions(conjugationForms.filter(form => form.category === 'Adjectives'));
            break;
        case 'particles':
            populateTopicOptions(conjugationForms.filter(form => form.category === 'Particles'));
            break;
        case 'grammar':
            populateGrammarOptions();
            break;
    }
    
    window.app.state.currentTopic = dom.topicSelect.value;
    saveState();
}

function populateTopicOptions(forms) {
    const dom = window.app.dom;
    forms.forEach(form => {
        const option = document.createElement('option');
        option.value = form.key;
        option.textContent = form.display;
        dom.topicSelect.appendChild(option);
    });
}

function populateGrammarOptions() {
    const dom = window.app.dom;
    const grammarN5 = japaneseGrammar.filter(point => point.level === 'N5');
    const grammarN4 = japaneseGrammar.filter(point => point.level === 'N4');
    
    const n5Group = createOptgroup('JLPT N5');
    grammarN5.forEach((point, index) => {
        n5Group.appendChild(createOption(`grammar_${index}`, point.grammar));
    });
    
    const n4Group = createOptgroup('JLPT N4');
    grammarN4.forEach((point, index) => {
        n4Group.appendChild(createOption(`grammar_${index + grammarN5.length}`, point.grammar));
    });
    
    dom.topicSelect.appendChild(n5Group);
    dom.topicSelect.appendChild(n4Group);
}

function createOptgroup(label) {
    const group = document.createElement('optgroup');
    group.label = label;
    return group;
}

function createOption(value, text) {
    const option = document.createElement('option');
    option.value = value;
    option.textContent = text;
    return option;
}

function startPractice() {
    window.app.state.currentMode = 'practice';
    generateNewPracticeSession();
    displayNextCard();
}

function generateNewPracticeSession() {
    const formKey = window.app.state.currentTopic;
    const formInfo = conjugationForms.find(f => f.key === formKey);
    if (!formInfo) return;

    let wordPool = [];
    if (formInfo.display.includes('Adjective')) {
        const adjType = formInfo.display.includes('I-Adjective') ? 'i-adjective' : 'na-adjective';
        wordPool = japaneseAdjectives.filter(adj => adj.type.startsWith(adjType) && adj.conjugations[formKey]);
    } else {
        wordPool = japaneseVerbs.filter(verb => verb.conjugations[formKey]);
    }
    
    window.app.state.learningQueue = wordPool
        .map(item => ({ item, formKey }))
        .sort(() => Math.random() - 0.5);
}

function displayNextCard() {
    displayPracticeUI();
    if (window.app.state.learningQueue.length === 0) {
        displayRoundComplete();
        return;
    }

    window.app.state.currentCard = window.app.state.learningQueue.shift();
    const { item, formKey } = window.app.state.currentCard;
    const formInfo = conjugationForms.find(f => f.key === formKey);
    const dom = window.app.dom;

    dom.kanaDisplay.textContent = item.kana;
    dom.kanjiDisplay.textContent = item.word === item.kana ? '' : item.word;
    dom.formDisplay.textContent = formInfo ? formInfo.display : '';
    dom.verbTypeDisplay.textContent = item.type;
}

function displayRoundComplete() {
    const dom = window.app.dom;
    dom.kanaDisplay.textContent = "🎉";
    dom.kanjiDisplay.textContent = "Round Complete!";
    dom.formDisplay.textContent = "Select a new topic or reset.";
    dom.verbTypeDisplay.textContent = "";
    [dom.answerInput, dom.nextButton, dom.checkButton].forEach(el => el.classList.add('hidden'));
}

function displayPracticeUI() {
    const dom = window.app.dom;
    [dom.introPanel, dom.startPracticeButton].forEach(el => el.classList.add('hidden'));
    [dom.cardPanel, dom.answerInput, dom.checkButton, dom.feedbackArea, dom.progressArea]
        .forEach(el => el.classList.remove('hidden'));

    dom.answerInput.value = '';
    dom.answerInput.className = '';
    dom.feedbackMessage.textContent = '';
    dom.correctAnswerDisplay.textContent = '';
    dom.checkButton.classList.remove('hidden');
    dom.nextButton.classList.add('hidden');
    dom.answerInput.focus();
}

function displayIntroductionUI() {
    const dom = window.app.dom;
    [dom.cardPanel, dom.answerInput, dom.checkButton, dom.nextButton, dom.feedbackArea, dom.progressArea]
        .forEach(el => el.classList.add('hidden'));

    dom.introPanel.classList.remove('hidden');
    dom.introSectionsContainer.innerHTML = '';

    const topicKey = window.app.state.currentTopic;
    if (topicKey.startsWith('grammar_')) {
        displayGrammarIntro(topicKey);
    } else {
        displayConjugationIntro(topicKey);
    }
}

function displayGrammarIntro(topicKey) {
    const dom = window.app.dom;
    const grammarIndex = parseInt(topicKey.split('_')[1], 10);
    const grammarPoint = japaneseGrammar[grammarIndex];
    
    if (grammarPoint) {
        dom.introTitle.textContent = grammarPoint.grammar;
        let html = `<h3>${grammarPoint.meaning} (JLPT ${grammarPoint.level})</h3>`;
        html += `<p>${grammarPoint.explanation}</p>`;
        
        grammarPoint.examples.forEach(ex => {
            html += `
                <div class="grammar-example">
                    <p class="jp">${ex.jp}</p>
                    <p class="kana">${ex.kana}</p>
                    <p class="en">${ex.en}</p>
                </div>
            `;
        });
        dom.introSectionsContainer.innerHTML = html;
    }
    
    dom.prevIntroSlideButton.parentElement.style.display = 'none';
    dom.startPracticeButton.classList.add('hidden');
}

function displayConjugationIntro(topicKey) {
    const dom = window.app.dom;
    const introContent = formIntroContent[topicKey];
    if (!introContent || !introContent.sections) {
        startPractice();
        return;
    }

    dom.introTitle.textContent = introContent.title;
    const totalSlides = introContent.sections.length;
    const section = introContent.sections[window.app.state.currentIntroSlideIndex];
    
    if (section) {
        let html = `<h3>${section.heading}</h3>`;
        html += section.content.split('\n').map(line => {
            line = line.trim();
            if (line.startsWith('•')) {
                return `<ul><li>${line.substring(1).trim().replace(/\* Example: (.*?) -> (.*?)/g, '<b>$1</b> &rarr; <b>$2</b>')}</li></ul>`;
            }
            return `<p>${line}</p>`;
        }).join('');
        dom.introSectionsContainer.innerHTML = html.replace(/<ul>\s*<\/ul>/g, '');
    }
    
    dom.prevIntroSlideButton.parentElement.style.display = 'flex';
    dom.prevIntroSlideButton.disabled = window.app.state.currentIntroSlideIndex === 0;
    dom.nextIntroSlideButton.style.display = (window.app.state.currentIntroSlideIndex === totalSlides - 1) ? 'none' : 'block';
    dom.startPracticeButton.classList.toggle('hidden', window.app.state.currentIntroSlideIndex !== totalSlides - 1);
}

function checkAnswer() {
    if (!window.app.state.currentCard) return;

    const dom = window.app.dom;
    const userAnswerRomaji = dom.answerInput.value.trim();
    const userAnswerHiragana = toHiragana(userAnswerRomaji);
    const { item, formKey } = window.app.state.currentCard;
    const correctAnswerHiragana = item.conjugations[formKey];

    const isCorrect = userAnswerHiragana === correctAnswerHiragana;

    if (isCorrect) {
        handleCorrectAnswer(item);
    } else {
        handleIncorrectAnswer(item, correctAnswerHiragana);
    }

    userProgress.updateTopicProgress(formKey, isCorrect);
    userProgress.updateStatistics(isCorrect);

    updateCounts();
    saveState();
    dom.checkButton.classList.add('hidden');
    dom.nextButton.classList.remove('hidden');
    dom.nextButton.focus();
}

function handleCorrectAnswer(item) {
    const dom = window.app.dom;
    dom.feedbackMessage.textContent = "Correct! 👍";
    dom.feedbackMessage.className = 'correct';
    dom.answerInput.classList.add('correct');
    window.app.state.correctCount++;
    userProgress.updateWordProgress(item.word, true);
}

function handleIncorrectAnswer(item, correctAnswerHiragana) {
    const dom = window.app.dom;
    dom.feedbackMessage.textContent = "Incorrect 👎";
    dom.feedbackMessage.className = 'incorrect';
    dom.answerInput.classList.add('incorrect');
    dom.correctAnswerDisplay.textContent = `Correct: ${correctAnswerHiragana}`;
    window.app.state.incorrectCount++;
    userProgress.updateWordProgress(item.word, false);
    window.app.state.learningQueue.splice(
        Math.min(3, window.app.state.learningQueue.length),
        0,
        window.app.state.currentCard
    );
}

// Romaji to Hiragana conversion system
const wanakana = {
    "a":"あ", "i":"い", "u":"う", "e":"え", "o":"お",
    "ka":"か", "ki":"き", "ku":"く", "ke":"け", "ko":"こ",
    "sa":"さ", "shi":"し", "su":"す", "se":"せ", "so":"そ",
    "ta":"た", "chi":"ち", "tsu":"つ", "te":"て", "to":"と",
    "na":"な", "ni":"に", "nu":"ぬ", "ne":"ね", "no":"の",
    "ha":"は", "hi":"ひ", "fu":"ふ", "he":"へ", "ho":"ほ",
    "ma":"ま", "mi":"み", "mu":"む", "me":"め", "mo":"も",
    "ya":"や", "yu":"ゆ", "yo":"よ",
    "ra":"ら", "ri":"り", "ru":"る", "re":"れ", "ro":"ろ",
    "wa":"わ", "wo":"を", "n":"ん",
    "ga":"が", "gi":"ぎ", "gu":"ぐ", "ge":"げ", "go":"ご",
    "za":"ざ", "ji":"じ", "zu":"ず", "ze":"ぜ", "zo":"ぞ",
    "da":"だ", "di":"ぢ", "du":"づ", "de":"で", "do":"ど",
    "ba":"ば", "bi":"び", "bu":"ぶ", "be":"べ", "bo":"ぼ",
    "pa":"ぱ", "pi":"ぴ", "pu":"ぷ", "pe":"ぺ", "po":"ぽ",
    "kya":"きゃ", "kyu":"きゅ", "kyo":"きょ",
    "sha":"しゃ", "shu":"しゅ", "sho":"しょ",
    "cha":"ちゃ", "chu":"ちゅ", "cho":"ちょ",
    "nya":"にゃ", "nyu":"にゅ", "nyo":"にょ",
    "hya":"ひゃ", "hyu":"ひゅ", "hyo":"ひょ",
    "mya":"みゃ", "myu":"みゅ", "myo":"みょ",
    "rya":"りゃ", "ryu":"りゅ", "ryo":"りょ",
    "gya":"ぎゃ", "gyu":"ぎゅ", "gyo":"ぎょ",
    "ja":"じゃ", "ju":"じゅ", "jo":"じょ",
    "bya":"びゃ", "byu":"びゅ", "byo":"びょ",
    "pya":"ぴゃ", "pyu":"ぴゅ", "pyo":"ぴょ"
};

function toHiragana(romaji) {
    let hiragana = '';
    let i = 0;
    romaji = romaji.toLowerCase()
                   .replace(/n'/, 'n')
                   .replace(/tchi/g, 'cchi');
                   
    while (i < romaji.length) {
        if (i + 1 < romaji.length && romaji[i] !== 'n' && romaji[i] === romaji[i+1]) {
            hiragana += 'っ';
            i++;
        }
        
        let found = false;
        // Try 3-character kana
        if (i + 2 < romaji.length) {
            const tryKana = romaji.slice(i, i + 3);
            if (wanakana[tryKana]) {
                hiragana += wanakana[tryKana];
                i += 3;
                found = true;
            }
        }
        // Try 2-character kana
        if (!found && i + 1 < romaji.length) {
            const tryKana = romaji.slice(i, i + 2);
            if (wanakana[tryKana]) {
                hiragana += wanakana[tryKana];
                i += 2;
                found = true;
            }
        }
        // Try 1-character kana
        if (!found) {
            const tryKana = romaji[i];
            if (wanakana[tryKana]) {
                hiragana += wanakana[tryKana];
            }
            i++;
        }
    }
    return hiragana;
}

// Check for existing profile and initialize app
document.addEventListener('DOMContentLoaded', () => {
    if (userProgress.getProgress().profile.username) {
        loadExistingProfile();
    }
});